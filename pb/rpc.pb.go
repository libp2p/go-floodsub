// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
Package floodsub_pb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	RPC
	Message
	ControlMessage
	ControlIHave
	ControlIWant
	ControlGraft
	ControlPrune
	TopicDescriptor
*/
package floodsub_pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TopicDescriptor_AuthOpts_AuthMode int32

const (
	TopicDescriptor_AuthOpts_NONE TopicDescriptor_AuthOpts_AuthMode = 0
	TopicDescriptor_AuthOpts_KEY  TopicDescriptor_AuthOpts_AuthMode = 1
	TopicDescriptor_AuthOpts_WOT  TopicDescriptor_AuthOpts_AuthMode = 2
)

var TopicDescriptor_AuthOpts_AuthMode_name = map[int32]string{
	0: "NONE",
	1: "KEY",
	2: "WOT",
}
var TopicDescriptor_AuthOpts_AuthMode_value = map[string]int32{
	"NONE": 0,
	"KEY":  1,
	"WOT":  2,
}

func (x TopicDescriptor_AuthOpts_AuthMode) String() string {
	return proto.EnumName(TopicDescriptor_AuthOpts_AuthMode_name, int32(x))
}
func (TopicDescriptor_AuthOpts_AuthMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRpc, []int{7, 0, 0}
}

type TopicDescriptor_EncOpts_EncMode int32

const (
	TopicDescriptor_EncOpts_NONE      TopicDescriptor_EncOpts_EncMode = 0
	TopicDescriptor_EncOpts_SHAREDKEY TopicDescriptor_EncOpts_EncMode = 1
	TopicDescriptor_EncOpts_WOT       TopicDescriptor_EncOpts_EncMode = 2
)

var TopicDescriptor_EncOpts_EncMode_name = map[int32]string{
	0: "NONE",
	1: "SHAREDKEY",
	2: "WOT",
}
var TopicDescriptor_EncOpts_EncMode_value = map[string]int32{
	"NONE":      0,
	"SHAREDKEY": 1,
	"WOT":       2,
}

func (x TopicDescriptor_EncOpts_EncMode) String() string {
	return proto.EnumName(TopicDescriptor_EncOpts_EncMode_name, int32(x))
}
func (TopicDescriptor_EncOpts_EncMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRpc, []int{7, 1, 0}
}

type RPC struct {
	Subscriptions []*RPC_SubOpts  `protobuf:"bytes,1,rep,name=subscriptions" json:"subscriptions,omitempty"`
	Publish       []*Message      `protobuf:"bytes,2,rep,name=publish" json:"publish,omitempty"`
	Control       *ControlMessage `protobuf:"bytes,3,opt,name=control" json:"control,omitempty"`
}

func (m *RPC) Reset()                    { *m = RPC{} }
func (m *RPC) String() string            { return proto.CompactTextString(m) }
func (*RPC) ProtoMessage()               {}
func (*RPC) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *RPC) GetSubscriptions() []*RPC_SubOpts {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *RPC) GetPublish() []*Message {
	if m != nil {
		return m.Publish
	}
	return nil
}

func (m *RPC) GetControl() *ControlMessage {
	if m != nil {
		return m.Control
	}
	return nil
}

type RPC_SubOpts struct {
	Subscribe bool   `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	Topicid   string `protobuf:"bytes,2,opt,name=topicid,proto3" json:"topicid,omitempty"`
}

func (m *RPC_SubOpts) Reset()                    { *m = RPC_SubOpts{} }
func (m *RPC_SubOpts) String() string            { return proto.CompactTextString(m) }
func (*RPC_SubOpts) ProtoMessage()               {}
func (*RPC_SubOpts) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0, 0} }

func (m *RPC_SubOpts) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *RPC_SubOpts) GetTopicid() string {
	if m != nil {
		return m.Topicid
	}
	return ""
}

type Message struct {
	From     []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Data     []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Seqno    []byte   `protobuf:"bytes,3,opt,name=seqno,proto3" json:"seqno,omitempty"`
	TopicIDs []string `protobuf:"bytes,4,rep,name=topicIDs" json:"topicIDs,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *Message) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetSeqno() []byte {
	if m != nil {
		return m.Seqno
	}
	return nil
}

func (m *Message) GetTopicIDs() []string {
	if m != nil {
		return m.TopicIDs
	}
	return nil
}

type ControlMessage struct {
	Ihave []*ControlIHave `protobuf:"bytes,1,rep,name=ihave" json:"ihave,omitempty"`
	Iwant []*ControlIWant `protobuf:"bytes,2,rep,name=iwant" json:"iwant,omitempty"`
	Graft []*ControlGraft `protobuf:"bytes,3,rep,name=graft" json:"graft,omitempty"`
	Prune []*ControlPrune `protobuf:"bytes,4,rep,name=prune" json:"prune,omitempty"`
}

func (m *ControlMessage) Reset()                    { *m = ControlMessage{} }
func (m *ControlMessage) String() string            { return proto.CompactTextString(m) }
func (*ControlMessage) ProtoMessage()               {}
func (*ControlMessage) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *ControlMessage) GetIhave() []*ControlIHave {
	if m != nil {
		return m.Ihave
	}
	return nil
}

func (m *ControlMessage) GetIwant() []*ControlIWant {
	if m != nil {
		return m.Iwant
	}
	return nil
}

func (m *ControlMessage) GetGraft() []*ControlGraft {
	if m != nil {
		return m.Graft
	}
	return nil
}

func (m *ControlMessage) GetPrune() []*ControlPrune {
	if m != nil {
		return m.Prune
	}
	return nil
}

type ControlIHave struct {
	TopicID    string   `protobuf:"bytes,1,opt,name=topicID,proto3" json:"topicID,omitempty"`
	MessageIDs []string `protobuf:"bytes,2,rep,name=messageIDs" json:"messageIDs,omitempty"`
}

func (m *ControlIHave) Reset()                    { *m = ControlIHave{} }
func (m *ControlIHave) String() string            { return proto.CompactTextString(m) }
func (*ControlIHave) ProtoMessage()               {}
func (*ControlIHave) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *ControlIHave) GetTopicID() string {
	if m != nil {
		return m.TopicID
	}
	return ""
}

func (m *ControlIHave) GetMessageIDs() []string {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

type ControlIWant struct {
	MessageIDs []string `protobuf:"bytes,1,rep,name=messageIDs" json:"messageIDs,omitempty"`
}

func (m *ControlIWant) Reset()                    { *m = ControlIWant{} }
func (m *ControlIWant) String() string            { return proto.CompactTextString(m) }
func (*ControlIWant) ProtoMessage()               {}
func (*ControlIWant) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

func (m *ControlIWant) GetMessageIDs() []string {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

type ControlGraft struct {
	TopicID string `protobuf:"bytes,1,opt,name=topicID,proto3" json:"topicID,omitempty"`
}

func (m *ControlGraft) Reset()                    { *m = ControlGraft{} }
func (m *ControlGraft) String() string            { return proto.CompactTextString(m) }
func (*ControlGraft) ProtoMessage()               {}
func (*ControlGraft) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *ControlGraft) GetTopicID() string {
	if m != nil {
		return m.TopicID
	}
	return ""
}

type ControlPrune struct {
	TopicID string `protobuf:"bytes,1,opt,name=topicID,proto3" json:"topicID,omitempty"`
}

func (m *ControlPrune) Reset()                    { *m = ControlPrune{} }
func (m *ControlPrune) String() string            { return proto.CompactTextString(m) }
func (*ControlPrune) ProtoMessage()               {}
func (*ControlPrune) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{6} }

func (m *ControlPrune) GetTopicID() string {
	if m != nil {
		return m.TopicID
	}
	return ""
}

// topicID = hash(topicDescriptor); (not the topic.name)
type TopicDescriptor struct {
	Name string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Auth *TopicDescriptor_AuthOpts `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
	Enc  *TopicDescriptor_EncOpts  `protobuf:"bytes,3,opt,name=enc" json:"enc,omitempty"`
}

func (m *TopicDescriptor) Reset()                    { *m = TopicDescriptor{} }
func (m *TopicDescriptor) String() string            { return proto.CompactTextString(m) }
func (*TopicDescriptor) ProtoMessage()               {}
func (*TopicDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{7} }

func (m *TopicDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TopicDescriptor) GetAuth() *TopicDescriptor_AuthOpts {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *TopicDescriptor) GetEnc() *TopicDescriptor_EncOpts {
	if m != nil {
		return m.Enc
	}
	return nil
}

type TopicDescriptor_AuthOpts struct {
	Mode TopicDescriptor_AuthOpts_AuthMode `protobuf:"varint,1,opt,name=mode,proto3,enum=floodsub.pb.TopicDescriptor_AuthOpts_AuthMode" json:"mode,omitempty"`
	Keys [][]byte                          `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
}

func (m *TopicDescriptor_AuthOpts) Reset()                    { *m = TopicDescriptor_AuthOpts{} }
func (m *TopicDescriptor_AuthOpts) String() string            { return proto.CompactTextString(m) }
func (*TopicDescriptor_AuthOpts) ProtoMessage()               {}
func (*TopicDescriptor_AuthOpts) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{7, 0} }

func (m *TopicDescriptor_AuthOpts) GetMode() TopicDescriptor_AuthOpts_AuthMode {
	if m != nil {
		return m.Mode
	}
	return TopicDescriptor_AuthOpts_NONE
}

func (m *TopicDescriptor_AuthOpts) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type TopicDescriptor_EncOpts struct {
	Mode      TopicDescriptor_EncOpts_EncMode `protobuf:"varint,1,opt,name=mode,proto3,enum=floodsub.pb.TopicDescriptor_EncOpts_EncMode" json:"mode,omitempty"`
	KeyHashes [][]byte                        `protobuf:"bytes,2,rep,name=keyHashes" json:"keyHashes,omitempty"`
}

func (m *TopicDescriptor_EncOpts) Reset()                    { *m = TopicDescriptor_EncOpts{} }
func (m *TopicDescriptor_EncOpts) String() string            { return proto.CompactTextString(m) }
func (*TopicDescriptor_EncOpts) ProtoMessage()               {}
func (*TopicDescriptor_EncOpts) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{7, 1} }

func (m *TopicDescriptor_EncOpts) GetMode() TopicDescriptor_EncOpts_EncMode {
	if m != nil {
		return m.Mode
	}
	return TopicDescriptor_EncOpts_NONE
}

func (m *TopicDescriptor_EncOpts) GetKeyHashes() [][]byte {
	if m != nil {
		return m.KeyHashes
	}
	return nil
}

func init() {
	proto.RegisterType((*RPC)(nil), "floodsub.pb.RPC")
	proto.RegisterType((*RPC_SubOpts)(nil), "floodsub.pb.RPC.SubOpts")
	proto.RegisterType((*Message)(nil), "floodsub.pb.Message")
	proto.RegisterType((*ControlMessage)(nil), "floodsub.pb.ControlMessage")
	proto.RegisterType((*ControlIHave)(nil), "floodsub.pb.ControlIHave")
	proto.RegisterType((*ControlIWant)(nil), "floodsub.pb.ControlIWant")
	proto.RegisterType((*ControlGraft)(nil), "floodsub.pb.ControlGraft")
	proto.RegisterType((*ControlPrune)(nil), "floodsub.pb.ControlPrune")
	proto.RegisterType((*TopicDescriptor)(nil), "floodsub.pb.TopicDescriptor")
	proto.RegisterType((*TopicDescriptor_AuthOpts)(nil), "floodsub.pb.TopicDescriptor.AuthOpts")
	proto.RegisterType((*TopicDescriptor_EncOpts)(nil), "floodsub.pb.TopicDescriptor.EncOpts")
	proto.RegisterEnum("floodsub.pb.TopicDescriptor_AuthOpts_AuthMode", TopicDescriptor_AuthOpts_AuthMode_name, TopicDescriptor_AuthOpts_AuthMode_value)
	proto.RegisterEnum("floodsub.pb.TopicDescriptor_EncOpts_EncMode", TopicDescriptor_EncOpts_EncMode_name, TopicDescriptor_EncOpts_EncMode_value)
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x8e, 0xd2, 0x4e,
	0x14, 0xc7, 0x7f, 0xa5, 0xec, 0xaf, 0xf4, 0xc0, 0xae, 0x64, 0xb2, 0x17, 0x15, 0x37, 0x86, 0x34,
	0x6a, 0x9a, 0x68, 0x6a, 0x82, 0xd1, 0xc4, 0x1b, 0x23, 0x02, 0x11, 0x62, 0x76, 0x21, 0xb3, 0x9b,
	0x6c, 0xbc, 0x6c, 0xcb, 0xb0, 0x34, 0x0b, 0x9d, 0xda, 0x99, 0xae, 0xd9, 0x57, 0xf0, 0x01, 0x7c,
	0x1c, 0x9f, 0xc2, 0xf7, 0xf0, 0x15, 0xcc, 0x9c, 0x29, 0x7f, 0x8a, 0xcb, 0x66, 0xaf, 0x38, 0x1d,
	0x3e, 0x9f, 0x99, 0xef, 0x39, 0x1d, 0x00, 0x3b, 0x4b, 0x23, 0x3f, 0xcd, 0xb8, 0xe4, 0xa4, 0x3e,
	0x5b, 0x70, 0x3e, 0x15, 0x79, 0xe8, 0xa7, 0xa1, 0xfb, 0xc7, 0x00, 0x93, 0x4e, 0x7a, 0xe4, 0x03,
	0x1c, 0x8a, 0x3c, 0x14, 0x51, 0x16, 0xa7, 0x32, 0xe6, 0x89, 0x70, 0x8c, 0xb6, 0xe9, 0xd5, 0x3b,
	0x8e, 0xbf, 0x05, 0xfb, 0x74, 0xd2, 0xf3, 0xcf, 0xf3, 0x70, 0x9c, 0x4a, 0x41, 0xcb, 0x38, 0xf1,
	0xc1, 0x4a, 0xf3, 0x70, 0x11, 0x8b, 0xb9, 0x53, 0x41, 0xf3, 0xb8, 0x64, 0x9e, 0x32, 0x21, 0x82,
	0x2b, 0x46, 0x57, 0x10, 0x79, 0x0b, 0x56, 0xc4, 0x13, 0x99, 0xf1, 0x85, 0x63, 0xb6, 0x0d, 0xaf,
	0xde, 0x79, 0x52, 0xe2, 0x7b, 0xfa, 0xbb, 0xb5, 0x56, 0xb0, 0xad, 0x2e, 0x58, 0x45, 0x00, 0x72,
	0x02, 0x76, 0x11, 0x21, 0x64, 0x8e, 0xd1, 0x36, 0xbc, 0x1a, 0xdd, 0x2c, 0x10, 0x07, 0x2c, 0xc9,
	0xd3, 0x38, 0x8a, 0xa7, 0x4e, 0xa5, 0x6d, 0x78, 0x36, 0x5d, 0x3d, 0xba, 0x11, 0x58, 0xc5, 0xb6,
	0x84, 0x40, 0x75, 0x96, 0xf1, 0x25, 0xda, 0x0d, 0x8a, 0xb5, 0x5a, 0x9b, 0x06, 0x32, 0x40, 0xab,
	0x41, 0xb1, 0x26, 0xc7, 0x70, 0x20, 0xd8, 0xb7, 0x84, 0x63, 0xd4, 0x06, 0xd5, 0x0f, 0xa4, 0x05,
	0x35, 0xdc, 0x73, 0xd4, 0x17, 0x4e, 0xb5, 0x6d, 0x7a, 0x36, 0x5d, 0x3f, 0xbb, 0xbf, 0x0d, 0x38,
	0x2a, 0xf7, 0x40, 0x5e, 0xc3, 0x41, 0x3c, 0x0f, 0x6e, 0x58, 0x31, 0xd9, 0xc7, 0x77, 0xf5, 0x3b,
	0x1a, 0x06, 0x37, 0x8c, 0x6a, 0x0e, 0x85, 0xef, 0x41, 0x22, 0x8b, 0x81, 0xde, 0x2d, 0x5c, 0x06,
	0x89, 0xa4, 0x9a, 0x53, 0xc2, 0x55, 0x16, 0xcc, 0xa4, 0x63, 0xee, 0x17, 0x3e, 0x2b, 0x80, 0x6a,
	0x4e, 0x09, 0x69, 0x96, 0x27, 0x0c, 0xe3, 0xef, 0x11, 0x26, 0x0a, 0xa0, 0x9a, 0x73, 0x87, 0xd0,
	0xd8, 0x4e, 0xba, 0x9e, 0xf2, 0xa8, 0x8f, 0x33, 0x5c, 0x4d, 0x79, 0xd4, 0x27, 0x4f, 0x01, 0x96,
	0xba, 0x71, 0x35, 0x9e, 0x0a, 0x8e, 0x67, 0x6b, 0xc5, 0xf5, 0x37, 0x3b, 0xa9, 0x16, 0x76, 0x78,
	0xe3, 0x1f, 0xde, 0x5b, 0xf3, 0xd8, 0xc1, 0xfe, 0x93, 0xb7, 0x48, 0x8c, 0x7e, 0x0f, 0xf9, 0xcb,
	0x84, 0x47, 0x17, 0xaa, 0xee, 0x33, 0x7d, 0x93, 0x79, 0xa6, 0x5e, 0x7f, 0x12, 0x2c, 0x59, 0x81,
	0x62, 0x4d, 0xde, 0x43, 0x35, 0xc8, 0xe5, 0x1c, 0xaf, 0x44, 0xbd, 0xf3, 0xbc, 0x34, 0xa5, 0x1d,
	0xdf, 0xef, 0xe6, 0x72, 0x8e, 0xbf, 0x0f, 0x54, 0xc8, 0x3b, 0x30, 0x59, 0x12, 0x15, 0x57, 0xfc,
	0xd9, 0xbd, 0xe6, 0x20, 0x89, 0x50, 0x54, 0x42, 0xeb, 0x87, 0x01, 0xb5, 0xd5, 0x56, 0xe4, 0x13,
	0x54, 0x97, 0x7c, 0xaa, 0x33, 0x1d, 0x75, 0xfc, 0x07, 0x9d, 0x8f, 0xc5, 0x29, 0x9f, 0x32, 0x8a,
	0xae, 0xea, 0xeb, 0x9a, 0xdd, 0xea, 0x37, 0xd1, 0xa0, 0x58, 0xbb, 0x2f, 0xf4, 0x19, 0x8a, 0x22,
	0x35, 0xa8, 0x9e, 0x8d, 0xcf, 0x06, 0xcd, 0xff, 0x88, 0x05, 0xe6, 0x97, 0xc1, 0xd7, 0xa6, 0xa1,
	0x8a, 0xcb, 0xf1, 0x45, 0xb3, 0xd2, 0xfa, 0x69, 0x80, 0x55, 0xa4, 0x23, 0x1f, 0x4b, 0x59, 0x5e,
	0x3d, 0xa4, 0x23, 0xf5, 0xb9, 0x95, 0xe4, 0x04, 0xec, 0x6b, 0x76, 0x3b, 0x0c, 0xc4, 0x9c, 0xad,
	0xe2, 0x6c, 0x16, 0xdc, 0x97, 0x78, 0xd4, 0x4e, 0xa4, 0x43, 0xb0, 0xcf, 0x87, 0x5d, 0x3a, 0xe8,
	0x97, 0x83, 0x85, 0xff, 0xe3, 0x1f, 0xda, 0x9b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x88,
	0x93, 0x00, 0xdd, 0x04, 0x00, 0x00,
}
