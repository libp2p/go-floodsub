syntax = "proto3";

package floodsub.pb;

message RPC {
	repeated SubOpts subscriptions = 1;
	repeated Message publish = 2;

	message SubOpts {
		bool subscribe = 1; // subscribe or unsubcribe
		string topicid = 2;
	}

    ControlMessage control = 3;
}

message Message {
	bytes from = 1;
	bytes data = 2;
	bytes seqno = 3;
	repeated string topicIDs = 4;
}

message ControlMessage {
    repeated ControlIHave ihave = 1;
    repeated ControlIWant iwant = 2;
    repeated ControlGraft graft = 3;
    repeated ControlPrune prune = 4;
}

message ControlIHave {
    string topicID = 1;
    repeated string messageIDs = 2;
}

message ControlIWant {
    repeated string messageIDs = 1;
}

message ControlGraft {
    string topicID = 1;
}

message ControlPrune {
    string topicID = 1;
}

// topicID = hash(topicDescriptor); (not the topic.name)
message TopicDescriptor {
	string name = 1;
	AuthOpts auth = 2;
	EncOpts enc = 3;

	message AuthOpts {
		AuthMode mode = 1;
		repeated bytes keys = 2; // root keys to trust

		enum AuthMode {
			NONE = 0; // no authentication, anyone can publish
			KEY = 1; // only messages signed by keys in the topic descriptor are accepted
			WOT = 2; // web of trust, certificates can allow publisher set to grow
		}
	}

	message EncOpts {
		EncMode mode = 1;
		repeated bytes keyHashes = 2; // the hashes of the shared keys used (salted)

		enum EncMode {
			NONE = 0; // no encryption, anyone can read
			SHAREDKEY = 1; // messages are encrypted with shared key
			WOT = 2; // web of trust, certificates can allow publisher set to grow
		}
	}
}
